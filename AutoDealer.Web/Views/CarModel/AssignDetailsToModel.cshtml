@model List<DetailCount>

@{
    ViewBag.Title = "Assign details";
}

<form asp-action="AssignDetailsToModel">

    <h2>Assign details</h2>

    <div>@ViewBag.CarModel.LineName</div>
    <div>@ViewBag.CarModel.ModelName</div>
    <div>@ViewBag.CarModel.TrimCode</div>

    <h4>Current assigned details series:</h4>
    <div id="added-rows" class="g-2">
        @foreach (var dc in Model)
        {
            <div class="row">
                <div class="col-1">@dc.DetailSeriesId</div>
                <div class="col-1">@dc.Count</div>
                <div class="col-3 delete_btn">
                    <button class="btn btn-danger">Remove</button>
                </div>
            </div>
        }
    </div>


    <div>
        <div class="row">

            <div class="col-4 form-floating my-2">
                @{
                    var detailSeries = ViewBag.DetailSeries as DetailSeries[];
                    var items = detailSeries!.Select(series =>
                        new SelectListItem(series.Code, series.Id.ToString()));
                    <select id="id-selection" class="form-select" asp-items="items"></select>
                }
                <label>Select details</label>
            </div>

            <div class="col-4 form-floating">
                <input id="count-input" class="form-control" placeholder="Count">
                <label for="count-input">Count</label>
                <span class="text-danger"></span>
            </div>
        </div>

        <button class="btn btn-primary on-add-click" id="add-btn">Add</button>
    </div>

    <hr class="my-4"/>

    <button class="btn btn-success" type="submit">Finish</button>
</form>


<script>
const rows = document.getElementById('added-rows');
const addBtn = document.getElementById('add-btn');
const idSelect = document.getElementById('id-selection');
const countInput = document.getElementById('count-input');

addBtn.addEventListener("click", addItem);
rows.addEventListener("click", deleteItem);

function addItem(event) {
    event.preventDefault();
    //item DIV
    const rowDiv = document.createElement('div');
    rowDiv.classList.add('row');
    
    //item Id
    const idDiv = document.createElement('div');
    idDiv.classList.add('col-1');
    const id = document.createElement('input');
    id.value = idSelect.value;
    id.name = `Model[${rows.childElementCount}].DetailSeriesId`;
    id.readOnly = true;
    id.classList.add('form-control');
    idDiv.appendChild(id);
    rowDiv.appendChild(idDiv);
    
    //item Count
    const countDiv = document.createElement('div');
    countDiv.classList.add('col-1');
    const count = document.createElement('input');
    count.value = countInput.value;
    count.name = `Model[${rows.childElementCount}].Count`;
    count.readOnly = true;
    count.classList.add('form-control');
    countDiv.appendChild(count);
    rowDiv.appendChild(countDiv);
    
    //delete BUTTON
    const deleteDiv = document.createElement('div');
    deleteDiv.classList.add('col-3');
    const deleteBtn = document.createElement('button');
    deleteBtn.innerText = 'Remove';
    deleteBtn.classList.add('delete_btn', 'btn', 'btn-danger');
    deleteDiv.appendChild(deleteBtn);    
    rowDiv.appendChild(deleteDiv);
    //Append to Actual LIST
    rows.appendChild(rowDiv);
    //Clear input VALUE
    countInput.value = "";
}

function deleteItem(event) {
    event.preventDefault();
    const item = event.target;
    //DELETE ITEM
    if (item.classList.contains("delete_btn")) {
        const pair = item.parentElement.parentElement;
        pair.remove();
        
        for(let i = 0; i < rows.childElementCount; i++) {
            let row = rows.children[i];
            let id = row.getElementsByTagName('input')[0];
            id.name = `Model[${i}].DetailSeriesId`;
            let count = row.getElementsByTagName('input')[1];
            count.name = `Model[${i}].Count`;            
        }
    }
}
</script>