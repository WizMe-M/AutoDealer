// <auto-generated />
using System;
using AutoDealer.DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoDealer.DAL.Migrations
{
    [DbContext(typeof(AutoDealerContext))]
    [Migration("20230224081357_CascadeDeleteUser")]
    partial class CascadeDeleteUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auto_status", new[] { "in_assembly", "ready_to_test", "in_test", "ready_to_sale", "sold" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "log_type", new[] { "error", "normal" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "post", new[] { "database_admin", "assembly_chief", "purchase_specialist", "storekeeper", "seller", "tester" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "request_status", new[] { "sent", "in_handling", "closed" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "test_status", new[] { "not_checked", "certified", "defective" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Auto", b =>
                {
                    b.Property<int>("IdAuto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_auto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAuto"));

                    b.Property<DateOnly?>("AssemblyDate")
                        .HasColumnType("date")
                        .HasColumnName("assembly_date");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<int>("IdTrim")
                        .HasColumnType("integer")
                        .HasColumnName("id_trim");

                    b.Property<AutoStatus>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("auto_status")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'in_assembly'");

                    b.HasKey("IdAuto")
                        .HasName("pk_autos");

                    b.HasIndex("IdTrim");

                    b.ToTable("autos", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdClient"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Birthplace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("birthplace");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_code");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("PassportIssuer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport_issuer");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport_number");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport_series");

                    b.HasKey("IdClient")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Contract", b =>
                {
                    b.Property<int>("IdContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_contract");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdContract"));

                    b.Property<DateOnly>("ConclusionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("conclusion_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("IdEmployee")
                        .HasColumnType("integer")
                        .HasColumnName("id_employee");

                    b.Property<int?>("IdPurchaseRequest")
                        .HasColumnType("integer")
                        .HasColumnName("id_purchase_request");

                    b.Property<int?>("IdSupplier")
                        .HasColumnType("integer")
                        .HasColumnName("id_supplier");

                    b.Property<DateOnly?>("LadingBillIssueDate")
                        .HasColumnType("date")
                        .HasColumnName("lading_bill_issue_date");

                    b.Property<DateOnly>("SupplyDate")
                        .HasColumnType("date")
                        .HasColumnName("supply_date");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("numeric")
                        .HasColumnName("total_sum");

                    b.HasKey("IdContract")
                        .HasName("pk_contracts");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdPurchaseRequest");

                    b.HasIndex("IdSupplier");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.ContractDetail", b =>
                {
                    b.Property<int>("IdContract")
                        .HasColumnType("integer")
                        .HasColumnName("id_contract");

                    b.Property<int>("IdDetailSeries")
                        .HasColumnType("integer")
                        .HasColumnName("id_detail_series");

                    b.Property<decimal>("CostPerOne")
                        .HasColumnType("numeric")
                        .HasColumnName("cost_per_one");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("count")
                        .HasDefaultValueSql("1");

                    b.HasKey("IdContract", "IdDetailSeries")
                        .HasName("pk_contract_details");

                    b.HasIndex("IdDetailSeries");

                    b.ToTable("contract_details", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Detail", b =>
                {
                    b.Property<int>("IdDetailSeries")
                        .HasColumnType("integer")
                        .HasColumnName("id_detail_series");

                    b.Property<int>("IdDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_detail");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDetail"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<int?>("IdAuto")
                        .HasColumnType("integer")
                        .HasColumnName("id_auto");

                    b.Property<int>("IdContract")
                        .HasColumnType("integer")
                        .HasColumnName("id_contract");

                    b.HasKey("IdDetailSeries", "IdDetail")
                        .HasName("pk_details");

                    b.HasIndex("IdAuto");

                    b.HasIndex("IdContract");

                    b.ToTable("details", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.DetailSeries", b =>
                {
                    b.Property<int>("IdDetailSeries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_detail_series");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDetailSeries"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("IdDetailSeries")
                        .HasName("pk_detail_series");

                    b.HasIndex(new[] { "Code" }, "uq_detail_series_code")
                        .IsUnique();

                    b.ToTable("detail_series", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_employee");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport_number");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport_series");

                    b.Property<Post>("Post")
                        .HasColumnType("post")
                        .HasColumnName("post");

                    b.HasKey("Id")
                        .HasName("pk_employee");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Line", b =>
                {
                    b.Property<int>("IdLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_line");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdLine"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("IdLine")
                        .HasName("pk_lines");

                    b.HasIndex(new[] { "Name" }, "uq_lines_name")
                        .IsUnique();

                    b.ToTable("lines", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("log_text");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("log_time")
                        .HasDefaultValueSql("now()");

                    b.Property<LogType>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("log_type")
                        .HasColumnName("log_type")
                        .HasDefaultValueSql("'normal'");

                    b.HasKey("Id")
                        .HasName("logs_pkey");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Margin", b =>
                {
                    b.Property<int>("IdTrim")
                        .HasColumnType("integer")
                        .HasColumnName("id_trim");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<decimal>("Margin1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasColumnName("margin")
                        .HasDefaultValueSql("10");

                    b.HasKey("IdTrim", "StartDate")
                        .HasName("pk_margins");

                    b.ToTable("margins", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Model", b =>
                {
                    b.Property<int>("IdModel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_model");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdModel"));

                    b.Property<int>("IdLine")
                        .HasColumnType("integer")
                        .HasColumnName("id_line");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("IdModel")
                        .HasName("pk_models");

                    b.HasIndex("IdLine");

                    b.HasIndex(new[] { "Name" }, "uq_models_name")
                        .IsUnique();

                    b.ToTable("models", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.PurchaseRequest", b =>
                {
                    b.Property<int>("IdPurchaseRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_purchase_requests");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPurchaseRequests"));

                    b.Property<DateOnly>("ExpectedSupplyDate")
                        .HasColumnType("date")
                        .HasColumnName("expected_supply_date");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_date");

                    b.Property<RequestStatus>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("request_status")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'sent'");

                    b.HasKey("IdPurchaseRequests")
                        .HasName("pk_purchase_requests");

                    b.HasIndex("IdUser");

                    b.ToTable("purchase_requests", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.PurchaseRequestDetail", b =>
                {
                    b.Property<int>("IdPurchaseRequest")
                        .HasColumnType("integer")
                        .HasColumnName("id_purchase_request");

                    b.Property<int>("IdDetailSeries")
                        .HasColumnType("integer")
                        .HasColumnName("id_detail_series");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("count")
                        .HasDefaultValueSql("1");

                    b.HasKey("IdPurchaseRequest", "IdDetailSeries")
                        .HasName("pk_purchase_request_details");

                    b.HasIndex("IdDetailSeries");

                    b.ToTable("purchase_request_details", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Sale", b =>
                {
                    b.Property<int>("IdAuto")
                        .HasColumnType("integer")
                        .HasColumnName("id_auto");

                    b.Property<DateTime>("ExecutionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("execution_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("integer")
                        .HasColumnName("id_employee");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("numeric")
                        .HasColumnName("total_sum");

                    b.HasKey("IdAuto", "ExecutionDate")
                        .HasName("pk_sales");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdEmployee");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Supplier", b =>
                {
                    b.Property<int>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_supplier");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSupplier"));

                    b.Property<string>("CorrespondentAccount")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("correspondent_account");

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("legal_address");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_address");

                    b.Property<string>("SettlementAccount")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("settlement_account");

                    b.Property<string>("Tin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tin");

                    b.HasKey("IdSupplier")
                        .HasName("pk_suppliers");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Test", b =>
                {
                    b.Property<int>("IdTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_test");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTest"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("IdEmployee")
                        .HasColumnType("integer")
                        .HasColumnName("id_employee");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("IdTest")
                        .HasName("pk_tests");

                    b.HasIndex("IdEmployee");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.TestAuto", b =>
                {
                    b.Property<int>("IdTest")
                        .HasColumnType("integer")
                        .HasColumnName("id_test");

                    b.Property<int>("IdAuto")
                        .HasColumnType("integer")
                        .HasColumnName("id_auto");

                    b.Property<DateOnly>("CertificationDate")
                        .HasColumnType("date")
                        .HasColumnName("certification_date");

                    b.Property<TestStatus>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("test_status")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'not_checked'");

                    b.HasKey("IdTest", "IdAuto")
                        .HasName("pk_test_autos");

                    b.HasIndex("IdAuto");

                    b.ToTable("test_autos", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Trim", b =>
                {
                    b.Property<int>("IdTrim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_trim");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTrim"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("IdModel")
                        .HasColumnType("integer")
                        .HasColumnName("id_model");

                    b.HasKey("IdTrim")
                        .HasName("pk_trims");

                    b.HasIndex("IdModel");

                    b.HasIndex(new[] { "Code" }, "uq_trims_code")
                        .IsUnique();

                    b.ToTable("trims", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.TrimDetail", b =>
                {
                    b.Property<int>("IdTrim")
                        .HasColumnType("integer")
                        .HasColumnName("id_trim");

                    b.Property<int>("IdDetailSeries")
                        .HasColumnType("integer")
                        .HasColumnName("id_detail_series");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("IdTrim", "IdDetailSeries")
                        .HasName("pk_trim_details");

                    b.HasIndex("IdDetailSeries");

                    b.ToTable("trim_details", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.User", b =>
                {
                    b.Property<int>("IdEmployee")
                        .HasColumnType("integer")
                        .HasColumnName("id_employee");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("IdEmployee")
                        .HasName("pk_users_employees");

                    b.HasIndex(new[] { "Login" }, "uq_users_login")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Work", b =>
                {
                    b.Property<int>("IdWorkPlan")
                        .HasColumnType("integer")
                        .HasColumnName("id_work_plan");

                    b.Property<int>("IdAuto")
                        .HasColumnType("integer")
                        .HasColumnName("id_auto");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("IdWorkPlan", "IdAuto")
                        .HasName("pk_works");

                    b.HasIndex("IdAuto");

                    b.ToTable("works", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.WorkPlan", b =>
                {
                    b.Property<int>("IdWorkPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_work_plan");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdWorkPlan"));

                    b.Property<DateOnly>("ConclusionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("conclusion_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly>("WorkEndDate")
                        .HasColumnType("date")
                        .HasColumnName("work_end_date");

                    b.Property<DateOnly>("WorkStartDate")
                        .HasColumnType("date")
                        .HasColumnName("work_start_date");

                    b.HasKey("IdWorkPlan")
                        .HasName("pk_work_plans");

                    b.ToTable("work_plans", (string)null);
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Auto", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Trim", "IdTrimNavigation")
                        .WithMany("Autos")
                        .HasForeignKey("IdTrim")
                        .IsRequired()
                        .HasConstraintName("fk_autos_trims");

                    b.Navigation("IdTrimNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Contract", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Employee", "IdEmployeeNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("fk_contracts_employees");

                    b.HasOne("AutoDealer.DAL.Database.Entity.PurchaseRequest", "IdPurchaseRequestNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("IdPurchaseRequest")
                        .HasConstraintName("fk_contracts_purchase_requests");

                    b.HasOne("AutoDealer.DAL.Database.Entity.Supplier", "IdSupplierNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("IdSupplier")
                        .HasConstraintName("fk_contracts_suppliers");

                    b.Navigation("IdEmployeeNavigation");

                    b.Navigation("IdPurchaseRequestNavigation");

                    b.Navigation("IdSupplierNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.ContractDetail", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Contract", "IdContractNavigation")
                        .WithMany("ContractDetails")
                        .HasForeignKey("IdContract")
                        .IsRequired()
                        .HasConstraintName("fk_contract_details_contracts");

                    b.HasOne("AutoDealer.DAL.Database.Entity.DetailSeries", "IdDetailSeriesNavigation")
                        .WithMany("ContractDetails")
                        .HasForeignKey("IdDetailSeries")
                        .IsRequired()
                        .HasConstraintName("fk_contract_details_detail_series");

                    b.Navigation("IdContractNavigation");

                    b.Navigation("IdDetailSeriesNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Detail", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Auto", "IdAutoNavigation")
                        .WithMany("Details")
                        .HasForeignKey("IdAuto")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_details_autos");

                    b.HasOne("AutoDealer.DAL.Database.Entity.Contract", "IdContractNavigation")
                        .WithMany("Details")
                        .HasForeignKey("IdContract")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_details_contracts");

                    b.HasOne("AutoDealer.DAL.Database.Entity.DetailSeries", "IdDetailSeriesNavigation")
                        .WithMany("Details")
                        .HasForeignKey("IdDetailSeries")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_details_detail_series");

                    b.Navigation("IdAutoNavigation");

                    b.Navigation("IdContractNavigation");

                    b.Navigation("IdDetailSeriesNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Margin", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Trim", "IdTrimNavigation")
                        .WithMany("Margins")
                        .HasForeignKey("IdTrim")
                        .IsRequired()
                        .HasConstraintName("fk_margins_trims");

                    b.Navigation("IdTrimNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Model", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Line", "IdLineNavigation")
                        .WithMany("Models")
                        .HasForeignKey("IdLine")
                        .IsRequired()
                        .HasConstraintName("fk_models_lines");

                    b.Navigation("IdLineNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.PurchaseRequest", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.User", "IdUserNavigation")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_purchase_requests_users");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.PurchaseRequestDetail", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.DetailSeries", "IdDetailSeriesNavigation")
                        .WithMany("PurchaseRequestDetails")
                        .HasForeignKey("IdDetailSeries")
                        .IsRequired()
                        .HasConstraintName("fk_purchase_request_details_detail_series");

                    b.HasOne("AutoDealer.DAL.Database.Entity.PurchaseRequest", "IdPurchaseRequestNavigation")
                        .WithMany("PurchaseRequestDetails")
                        .HasForeignKey("IdPurchaseRequest")
                        .IsRequired()
                        .HasConstraintName("fk_purchase_request_details_purchase_requests");

                    b.Navigation("IdDetailSeriesNavigation");

                    b.Navigation("IdPurchaseRequestNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Sale", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Auto", "IdAutoNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("IdAuto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sales_autos");

                    b.HasOne("AutoDealer.DAL.Database.Entity.Client", "IdClientNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sales_clients");

                    b.HasOne("AutoDealer.DAL.Database.Entity.Employee", "IdEmployeeNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_sales_employees");

                    b.Navigation("IdAutoNavigation");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdEmployeeNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Test", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Employee", "IdEmployeeNavigation")
                        .WithMany("Tests")
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_tests_employees");

                    b.Navigation("IdEmployeeNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.TestAuto", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Auto", "IdAutoNavigation")
                        .WithMany("TestAutos")
                        .HasForeignKey("IdAuto")
                        .IsRequired()
                        .HasConstraintName("fk_test_autos_autos");

                    b.HasOne("AutoDealer.DAL.Database.Entity.Test", "IdTestNavigation")
                        .WithMany("TestAutos")
                        .HasForeignKey("IdTest")
                        .IsRequired()
                        .HasConstraintName("fk_test_autos_tests");

                    b.Navigation("IdAutoNavigation");

                    b.Navigation("IdTestNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Trim", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Model", "IdModelNavigation")
                        .WithMany("Trims")
                        .HasForeignKey("IdModel")
                        .IsRequired()
                        .HasConstraintName("fk_trims_models");

                    b.Navigation("IdModelNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.TrimDetail", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.DetailSeries", "IdDetailSeriesNavigation")
                        .WithMany("TrimDetails")
                        .HasForeignKey("IdDetailSeries")
                        .IsRequired()
                        .HasConstraintName("fk_trim_details_detail_series");

                    b.HasOne("AutoDealer.DAL.Database.Entity.Trim", "IdTrimNavigation")
                        .WithMany("TrimDetails")
                        .HasForeignKey("IdTrim")
                        .IsRequired()
                        .HasConstraintName("fk_trim_details_trims");

                    b.Navigation("IdDetailSeriesNavigation");

                    b.Navigation("IdTrimNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.User", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("AutoDealer.DAL.Database.Entity.User", "IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_employees");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Work", b =>
                {
                    b.HasOne("AutoDealer.DAL.Database.Entity.Auto", "IdAutoNavigation")
                        .WithMany("Works")
                        .HasForeignKey("IdAuto")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_works_autos");

                    b.HasOne("AutoDealer.DAL.Database.Entity.WorkPlan", "IdWorkPlanNavigation")
                        .WithMany("Works")
                        .HasForeignKey("IdWorkPlan")
                        .IsRequired()
                        .HasConstraintName("fk_works_work_plans");

                    b.Navigation("IdAutoNavigation");

                    b.Navigation("IdWorkPlanNavigation");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Auto", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Sales");

                    b.Navigation("TestAutos");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Client", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Contract", b =>
                {
                    b.Navigation("ContractDetails");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.DetailSeries", b =>
                {
                    b.Navigation("ContractDetails");

                    b.Navigation("Details");

                    b.Navigation("PurchaseRequestDetails");

                    b.Navigation("TrimDetails");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Employee", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Sales");

                    b.Navigation("Tests");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Line", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Model", b =>
                {
                    b.Navigation("Trims");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.PurchaseRequest", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("PurchaseRequestDetails");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Supplier", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Test", b =>
                {
                    b.Navigation("TestAutos");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.Trim", b =>
                {
                    b.Navigation("Autos");

                    b.Navigation("Margins");

                    b.Navigation("TrimDetails");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.User", b =>
                {
                    b.Navigation("PurchaseRequests");
                });

            modelBuilder.Entity("AutoDealer.DAL.Database.Entity.WorkPlan", b =>
                {
                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
