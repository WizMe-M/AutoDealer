CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TYPE auto_status AS ENUM ('in_assembly', 'ready_to_test', 'in_test', 'ready_to_sale', 'sold');
    CREATE TYPE log_type AS ENUM ('error', 'normal');
    CREATE TYPE post AS ENUM ('database_admin', 'assembly_chief', 'purchase_specialist', 'storekeeper', 'seller', 'tester');
    CREATE TYPE request_status AS ENUM ('sent', 'in_handling', 'closed');
    CREATE TYPE test_status AS ENUM ('not_checked', 'certified', 'defective');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE clients (
        id_client integer GENERATED BY DEFAULT AS IDENTITY,
        first_name text NOT NULL,
        last_name text NOT NULL,
        middle_name text NULL,
        birthdate date NOT NULL,
        birthplace text NOT NULL,
        passport_series text NOT NULL,
        passport_number text NOT NULL,
        passport_issuer text NOT NULL,
        department_code text NOT NULL,
        CONSTRAINT pk_clients PRIMARY KEY (id_client)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE detail_series (
        id_detail_series integer GENERATED BY DEFAULT AS IDENTITY,
        code text NOT NULL,
        description text NULL,
        CONSTRAINT pk_detail_series PRIMARY KEY (id_detail_series)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE employees (
        id_employee integer GENERATED BY DEFAULT AS IDENTITY,
        first_name text NOT NULL,
        last_name text NOT NULL,
        middle_name text NULL,
        passport_series text NOT NULL,
        passport_number text NOT NULL,
        post post NOT NULL,
        CONSTRAINT pk_employee PRIMARY KEY (id_employee)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE lines (
        id_line integer GENERATED BY DEFAULT AS IDENTITY,
        name text NOT NULL,
        CONSTRAINT pk_lines PRIMARY KEY (id_line)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE logs (
        id integer GENERATED BY DEFAULT AS IDENTITY,
        log_time timestamp without time zone NOT NULL DEFAULT (now()),
        log_text text NOT NULL,
        log_type log_type NOT NULL DEFAULT ('normal'),
        CONSTRAINT logs_pkey PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE suppliers (
        id_supplier integer GENERATED BY DEFAULT AS IDENTITY,
        legal_address text NOT NULL,
        postal_address text NOT NULL,
        correspondent_account text NOT NULL,
        settlement_account text NOT NULL,
        tin text NOT NULL,
        CONSTRAINT pk_suppliers PRIMARY KEY (id_supplier)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE work_plans (
        id_work_plan integer GENERATED BY DEFAULT AS IDENTITY,
        conclusion_date date NOT NULL DEFAULT (now()),
        work_start_date date NOT NULL,
        work_end_date date NOT NULL,
        CONSTRAINT pk_work_plans PRIMARY KEY (id_work_plan)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE tests (
        id_test integer GENERATED BY DEFAULT AS IDENTITY,
        id_employee integer NULL,
        start_date date NOT NULL,
        end_date date NOT NULL,
        CONSTRAINT pk_tests PRIMARY KEY (id_test),
        CONSTRAINT fk_tests_employees FOREIGN KEY (id_employee) REFERENCES employees (id_employee) ON DELETE SET NULL
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE users (
        id_employee integer NOT NULL,
        login text NOT NULL,
        password text NOT NULL,
        deleted boolean NOT NULL,
        CONSTRAINT pk_users_employees PRIMARY KEY (id_employee),
        CONSTRAINT fk_users_employees FOREIGN KEY (id_employee) REFERENCES employees (id_employee)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE models (
        id_model integer GENERATED BY DEFAULT AS IDENTITY,
        id_line integer NOT NULL,
        name text NOT NULL,
        CONSTRAINT pk_models PRIMARY KEY (id_model),
        CONSTRAINT fk_models_lines FOREIGN KEY (id_line) REFERENCES lines (id_line)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE purchase_requests (
        id_purchase_requests integer GENERATED BY DEFAULT AS IDENTITY,
        id_user integer NULL,
        sent_date timestamp without time zone NOT NULL,
        expected_supply_date date NOT NULL,
        status request_status NOT NULL DEFAULT ('sent'),
        CONSTRAINT pk_purchase_requests PRIMARY KEY (id_purchase_requests),
        CONSTRAINT fk_purchase_requests_users FOREIGN KEY (id_user) REFERENCES users (id_employee) ON DELETE SET NULL
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE trims (
        id_trim integer GENERATED BY DEFAULT AS IDENTITY,
        id_model integer NOT NULL,
        code text NOT NULL,
        CONSTRAINT pk_trims PRIMARY KEY (id_trim),
        CONSTRAINT fk_trims_models FOREIGN KEY (id_model) REFERENCES models (id_model)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE contracts (
        id_contract integer GENERATED BY DEFAULT AS IDENTITY,
        id_employee integer NULL,
        id_supplier integer NULL,
        id_purchase_request integer NULL,
        conclusion_date date NOT NULL DEFAULT (now()),
        supply_date date NOT NULL,
        total_sum numeric NOT NULL,
        lading_bill_issue_date date NULL,
        CONSTRAINT pk_contracts PRIMARY KEY (id_contract),
        CONSTRAINT fk_contracts_employees FOREIGN KEY (id_employee) REFERENCES employees (id_employee),
        CONSTRAINT fk_contracts_purchase_requests FOREIGN KEY (id_purchase_request) REFERENCES purchase_requests (id_purchase_requests),
        CONSTRAINT fk_contracts_suppliers FOREIGN KEY (id_supplier) REFERENCES suppliers (id_supplier)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE purchase_request_details (
        id_purchase_request integer NOT NULL,
        id_detail_series integer NOT NULL,
        count integer NOT NULL DEFAULT (1),
        CONSTRAINT pk_purchase_request_details PRIMARY KEY (id_purchase_request, id_detail_series),
        CONSTRAINT fk_purchase_request_details_detail_series FOREIGN KEY (id_detail_series) REFERENCES detail_series (id_detail_series),
        CONSTRAINT fk_purchase_request_details_purchase_requests FOREIGN KEY (id_purchase_request) REFERENCES purchase_requests (id_purchase_requests)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE autos (
        id_auto integer GENERATED BY DEFAULT AS IDENTITY,
        id_trim integer NOT NULL,
        assembly_date date NULL,
        cost numeric NULL,
        status auto_status NOT NULL DEFAULT ('in_assembly'),
        CONSTRAINT pk_autos PRIMARY KEY (id_auto),
        CONSTRAINT fk_autos_trims FOREIGN KEY (id_trim) REFERENCES trims (id_trim)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE margins (
        id_trim integer NOT NULL,
        start_date date NOT NULL,
        margin numeric NOT NULL DEFAULT (10),
        CONSTRAINT pk_margins PRIMARY KEY (id_trim, start_date),
        CONSTRAINT fk_margins_trims FOREIGN KEY (id_trim) REFERENCES trims (id_trim)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE trim_details (
        id_trim integer NOT NULL,
        id_detail_series integer NOT NULL,
        count integer NOT NULL,
        CONSTRAINT pk_trim_details PRIMARY KEY (id_trim, id_detail_series),
        CONSTRAINT fk_trim_details_detail_series FOREIGN KEY (id_detail_series) REFERENCES detail_series (id_detail_series),
        CONSTRAINT fk_trim_details_trims FOREIGN KEY (id_trim) REFERENCES trims (id_trim)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE contract_details (
        id_contract integer NOT NULL,
        id_detail_series integer NOT NULL,
        count integer NOT NULL DEFAULT (1),
        cost_per_one numeric NOT NULL,
        CONSTRAINT pk_contract_details PRIMARY KEY (id_contract, id_detail_series),
        CONSTRAINT fk_contract_details_contracts FOREIGN KEY (id_contract) REFERENCES contracts (id_contract),
        CONSTRAINT fk_contract_details_detail_series FOREIGN KEY (id_detail_series) REFERENCES detail_series (id_detail_series)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE details (
        id_detail_series integer NOT NULL,
        id_detail integer GENERATED BY DEFAULT AS IDENTITY,
        id_contract integer NOT NULL,
        id_auto integer NULL,
        cost numeric NOT NULL,
        CONSTRAINT pk_details PRIMARY KEY (id_detail_series, id_detail),
        CONSTRAINT fk_details_autos FOREIGN KEY (id_auto) REFERENCES autos (id_auto) ON DELETE SET NULL,
        CONSTRAINT fk_details_contracts FOREIGN KEY (id_contract) REFERENCES contracts (id_contract) ON DELETE RESTRICT,
        CONSTRAINT fk_details_detail_series FOREIGN KEY (id_detail_series) REFERENCES detail_series (id_detail_series) ON DELETE RESTRICT
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE sales (
        id_auto integer NOT NULL,
        execution_date timestamp without time zone NOT NULL DEFAULT (now()),
        id_client integer NOT NULL,
        id_employee integer NOT NULL,
        total_sum numeric NOT NULL,
        CONSTRAINT pk_sales PRIMARY KEY (id_auto, execution_date),
        CONSTRAINT fk_sales_autos FOREIGN KEY (id_auto) REFERENCES autos (id_auto) ON DELETE RESTRICT,
        CONSTRAINT fk_sales_clients FOREIGN KEY (id_client) REFERENCES clients (id_client) ON DELETE RESTRICT,
        CONSTRAINT fk_sales_employees FOREIGN KEY (id_employee) REFERENCES employees (id_employee) ON DELETE SET NULL
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE test_autos (
        id_test integer NOT NULL,
        id_auto integer NOT NULL,
        certification_date date NOT NULL,
        status test_status NOT NULL DEFAULT ('not_checked'),
        CONSTRAINT pk_test_autos PRIMARY KEY (id_test, id_auto),
        CONSTRAINT fk_test_autos_autos FOREIGN KEY (id_auto) REFERENCES autos (id_auto),
        CONSTRAINT fk_test_autos_tests FOREIGN KEY (id_test) REFERENCES tests (id_test)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE TABLE works (
        id_work_plan integer NOT NULL,
        id_auto integer NOT NULL,
        name text NOT NULL,
        description text NULL,
        CONSTRAINT pk_works PRIMARY KEY (id_work_plan, id_auto),
        CONSTRAINT fk_works_autos FOREIGN KEY (id_auto) REFERENCES autos (id_auto) ON DELETE SET NULL,
        CONSTRAINT fk_works_work_plans FOREIGN KEY (id_work_plan) REFERENCES work_plans (id_work_plan)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_autos_id_trim" ON autos (id_trim);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_contract_details_id_detail_series" ON contract_details (id_detail_series);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_contracts_id_employee" ON contracts (id_employee);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_contracts_id_purchase_request" ON contracts (id_purchase_request);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_contracts_id_supplier" ON contracts (id_supplier);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE UNIQUE INDEX uq_detail_series_code ON detail_series (code);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_details_id_auto" ON details (id_auto);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_details_id_contract" ON details (id_contract);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE UNIQUE INDEX uq_lines_name ON lines (name);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_models_id_line" ON models (id_line);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE UNIQUE INDEX uq_models_name ON models (name);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_purchase_request_details_id_detail_series" ON purchase_request_details (id_detail_series);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_purchase_requests_id_user" ON purchase_requests (id_user);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_sales_id_client" ON sales (id_client);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_sales_id_employee" ON sales (id_employee);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_test_autos_id_auto" ON test_autos (id_auto);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_tests_id_employee" ON tests (id_employee);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_trim_details_id_detail_series" ON trim_details (id_detail_series);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_trims_id_model" ON trims (id_model);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE UNIQUE INDEX uq_trims_code ON trims (code);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE UNIQUE INDEX uq_users_login ON users (login);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    CREATE INDEX "IX_works_id_auto" ON works (id_auto);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217071714_Initial') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230217071714_Initial', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217103000_CreateStoredFunctionsAndTriggers') THEN
    -- log functions

    create or replace function log(type log_type, value text) returns void
        language plpgsql
    as
    $$
    begin
        insert into logs (log_type, log_text)
        values (type, value);
    end;
    $$;

    create or replace function log(value text) returns void
        language plpgsql
    as
    $$
    begin
        insert into logs (log_text)
        values (value);
    end;
    $$;

    -- log functions


    -- normal functions

    create or replace function sell_auto(
        auto int,
        client int,
        employee int
    ) returns void
        language plpgsql
    as
    $$
    declare
        auto_cost     decimal;
        real_status   auto_status;
        trim_id       int;
        active_margin record;
    begin

        select cost, status, id_trim
        into auto_cost, real_status, trim_id
        from autos
        where id_auto = auto;

        if real_status != 'ready_to_sale' then
            raise exception 'It is available to sale only "ready to sale" autos! Current status is: %', real_status;
        end if;


        select *
        from margins
        where start_date <= current_date
          and id_trim = trim_id
        order by start_date desc
        limit 1
        into active_margin;

        if active_margin is null then
            raise exception 'Is is not possible to sell auto without margin';
        end if;

        auto_cost = auto_cost * (1 + active_margin.margin / 100.0);

        update autos
        set status = 'sold'
        where id_auto = auto;

        insert into sales(id_auto, id_client, id_employee, total_sum)
        values (auto, client, employee, auto_cost);
    end;
    $$;

    create or replace function return_auto(
        auto int,
        sale_time timestamp
    ) returns void
        language plpgsql
    as
    $$
    declare
        returning_sale record;
    begin
        select *
        from sales
        where id_auto = auto
          and execution_date = sale_time
        limit 1
        into returning_sale;

        update autos
        set status = 'ready_to_sale'
        where id_auto = auto;

        delete
        from sales
        where id_auto = auto
          and execution_date = sale_time;
    end;
    $$;

    create or replace function set_margin(
        trim_id int,
        begins_act_from date,
        margin_value decimal
    )
        returns void
        language plpgsql
    as
    $$
    declare
        margin_row record;
    begin
        for margin_row in
            select *
            from margins
            loop
                if margin_row.id_trim = trim_id and margin_row.start_date >= begins_act_from then
                    raise exception 'There is already margin for such trim with earlier date (%)!', margin_row.start_date;
                end if;
            end loop;

        if margin_row is null then
            raise notice 'no rows';
        end if;

        insert into margins (id_trim, start_date, margin)
        values (trim_id, begins_act_from, margin_value);
    end;
    $$;

    create or replace function assembly_auto(
        auto int
    ) returns void
        language plpgsql
    as
    $$
    declare
        auto_cost   decimal := 0;
        trim_id     int;
        real_status auto_status;
        detail_row  record;
    begin

        select status, id_trim
        into real_status, trim_id
        from autos
        where id_auto = auto;

        if real_status != 'in_assembly' then
            raise exception 'It is available to finish assembly only "in_assembly" autos! Current status is: %', real_status;
        end if;

        for detail_row in
            select d.id_detail, ds.code, ds.description, d.cost
            from details as d
                     join detail_series as ds on ds.id_detail_series = d.id_detail_series
            where d.id_auto = auto
            loop
                raise notice 'detail (id `%`) code=`%`, description=`%`, cost=`%`',
                    detail_row.id_detail, detail_row.code, detail_row.description, detail_row.cost;
                auto_cost = auto_cost + detail_row.cost;
            end loop;

        update autos
        set cost          = auto_cost,
            assembly_date = current_date,
            status        = 'ready_to_test'
        where id_auto = auto;
    end;
    $$;

    create or replace function process_lading_bill(
        contract int
    ) returns void
        language plpgsql
    as
    $$
    declare
        detail_in_contract record;
    begin

        for detail_in_contract in
            select cd.id_detail_series as detail_series,
                   cd.cost_per_one     as cost_per_one,
                   cd.count            as count
            from contract_details as cd
            where id_contract = contract
            loop
                for i in 1..detail_in_contract.count
                    loop
                        insert into details (id_detail_series, cost, id_contract)
                        values (detail_in_contract.detail_series, detail_in_contract.cost_per_one, contract);
                    end loop;
            end loop;

        update contracts
        set lading_bill_issue_date = current_date
        where id_contract = contract;

    end;
    $$;

    -- normal functions
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217103000_CreateStoredFunctionsAndTriggers') THEN
    -- triggers

    create or replace function tr_log_contracts_ins() returns trigger
        language plpgsql
    as
    $$
    declare
        value text;
    begin
        value = 'INSERT IN contracts (id = ' || new.id_contract || '): ' ||
                'supplier = ' || new.id_supplier || '; total sum of details = ' || new.total_sum ||
                '; supply date = ' || new.supply_date || '; employee = ' || new.id_employee;
        perform log(value);
        return new;
    end;
    $$;

    create or replace function tr_log_contracts_upd() returns trigger
        language plpgsql
    as
    $$
    declare
        value text;
    begin
        value = 'UPDATE IN contracts (id = ' || new.id_contract
                    || '):  lading bill issued on = ' || new.lading_bill_issue_date;
        perform log(value);
        return new;
    end;
    $$;

    create or replace function tr_log_sales_ins() returns trigger
        language plpgsql
    as
    $$
    declare
        value text;
    begin
        value = 'INSERT IN sales: ' ||
                'auto = ' || new.id_auto || '; doc execution time = ' || new.execution_date || ': ' ||
                'total sum = ' || new.total_sum || '; client = ' || new.id_client;
        perform log(value);
        return new;
    end;
    $$;

    create or replace function tr_log_sales_del() returns trigger
        language plpgsql
    as
    $$
    declare
        value text;
    begin
        value = 'DELETE IN sales: ' ||
                'auto = ' || old.id_auto || '; doc execution time = ' || old.execution_date || ': ' ||
                'total sum = ' || old.total_sum || '; client = ' || old.id_client;
        perform log(value);
        return old;
    end;
    $$;

    create or replace trigger log_insert_contract
        before insert
        on contracts
        for each row
    execute function tr_log_contracts_ins();

    create or replace trigger log_update_contract
        before update of lading_bill_issue_date
        on contracts
        for each row
        when ( old.lading_bill_issue_date is null
            and old.lading_bill_issue_date is distinct from new.lading_bill_issue_date )
    execute function tr_log_contracts_upd();

    create or replace trigger log_insert_sale
        before insert
        on sales
        for each row
    execute function tr_log_sales_ins();

    create or replace trigger log_delete_sale
        after delete
        on sales
        for each row
    execute function tr_log_sales_del();

    -- triggers
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230217103000_CreateStoredFunctionsAndTriggers') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230217103000_CreateStoredFunctionsAndTriggers', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230223183926_FixEnum') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230223183926_FixEnum', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230224081357_CascadeDeleteUser') THEN
    ALTER TABLE users DROP CONSTRAINT fk_users_employees;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230224081357_CascadeDeleteUser') THEN
    ALTER TABLE users ADD CONSTRAINT fk_users_employees FOREIGN KEY (id_employee) REFERENCES employees (id_employee) ON DELETE CASCADE;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230224081357_CascadeDeleteUser') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230224081357_CascadeDeleteUser', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230224101909_DefaultEmployeeAndUser') THEN
    INSERT INTO employees (id_employee, first_name, last_name, middle_name, passport_number, passport_series, post)
    VALUES (1, 'Maxim', 'Timkin', NULL, '975717', '1199', 'database_admin'::post);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230224101909_DefaultEmployeeAndUser') THEN
    INSERT INTO users (id_employee, deleted, login, password)
    VALUES (1, FALSE, 'timkin.moxim@mail.ru', '1ED6D5667B292B55FE629FCACB0027C808D6686C8C24B045E15212FC0207C73EBBC97F796695FCD306E2E4D3E8CCBF64C031221403023CEBFE86738119C97C20');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230224101909_DefaultEmployeeAndUser') THEN
    PERFORM setval(
        pg_get_serial_sequence('employees', 'id_employee'),
        GREATEST(
            (SELECT MAX(id_employee) FROM employees) + 1,
            nextval(pg_get_serial_sequence('employees', 'id_employee'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230224101909_DefaultEmployeeAndUser') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230224101909_DefaultEmployeeAndUser', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226074020_PRSentDateAddDefaultValue') THEN
    ALTER TABLE purchase_requests ALTER COLUMN sent_date SET DEFAULT (now());
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226074020_PRSentDateAddDefaultValue') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230226074020_PRSentDateAddDefaultValue', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226074653_UserRenameUniqueConstraint') THEN
    ALTER TABLE users RENAME COLUMN login TO email;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226074653_UserRenameUniqueConstraint') THEN
    ALTER INDEX uq_users_login RENAME TO uq_users_email;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226074653_UserRenameUniqueConstraint') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230226074653_UserRenameUniqueConstraint', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226095628_PurchaseRequestDetailOnDeleteBehaviors') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230226095628_PurchaseRequestDetailOnDeleteBehaviors', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    ALTER TABLE autos DROP CONSTRAINT fk_autos_trims;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    ALTER TABLE margins DROP CONSTRAINT fk_margins_trims;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    DROP TABLE trim_details;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    DROP TABLE trims;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    DROP TABLE models;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    DROP TABLE lines;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    CREATE TABLE car_models (
        id_car_model integer GENERATED BY DEFAULT AS IDENTITY,
        line_name text NOT NULL,
        model_name text NOT NULL,
        trim_code text NOT NULL,
        CONSTRAINT pk_car_models PRIMARY KEY (id_car_model)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    CREATE TABLE car_model_details (
        id_car_model integer NOT NULL,
        id_detail_series integer NOT NULL,
        count integer NOT NULL,
        CONSTRAINT pk_car_model_details PRIMARY KEY (id_car_model, id_detail_series),
        CONSTRAINT fk_car_model_details_detail_series FOREIGN KEY (id_detail_series) REFERENCES detail_series (id_detail_series),
        CONSTRAINT fk_car_model_details_trims FOREIGN KEY (id_car_model) REFERENCES car_models (id_car_model)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    CREATE INDEX "IX_car_model_details_id_detail_series" ON car_model_details (id_detail_series);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    CREATE UNIQUE INDEX uq_car_models_name ON car_models (line_name, model_name, trim_code);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    ALTER TABLE autos ADD CONSTRAINT fk_autos_trims FOREIGN KEY (id_trim) REFERENCES car_models (id_car_model);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    ALTER TABLE margins ADD CONSTRAINT fk_margins_trims FOREIGN KEY (id_trim) REFERENCES car_models (id_car_model);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226115443_MergeLineModelTrimIntoCarModel') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230226115443_MergeLineModelTrimIntoCarModel', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230226150600_RenameProperties') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230226150600_RenameProperties', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227164042_PresetData') THEN
    INSERT INTO car_models (id_car_model, line_name, model_name, trim_code)
    VALUES (1, 'Sun', 'Crawler', 'SC-4');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227164042_PresetData') THEN
    INSERT INTO employees (id_employee, first_name, last_name, middle_name, passport_number, passport_series, post)
    VALUES (2, 'Ivan', 'Ivanov', NULL, '111111', '1111', 'assembly_chief'::post);
    INSERT INTO employees (id_employee, first_name, last_name, middle_name, passport_number, passport_series, post)
    VALUES (3, 'Andrey', 'Andreev', NULL, '222222', '2222', 'purchase_specialist'::post);
    INSERT INTO employees (id_employee, first_name, last_name, middle_name, passport_number, passport_series, post)
    VALUES (4, 'Igor', 'Igorev', NULL, '333333', '3333', 'storekeeper'::post);
    INSERT INTO employees (id_employee, first_name, last_name, middle_name, passport_number, passport_series, post)
    VALUES (5, 'Sergey', 'Sergeev', NULL, '444444', '4444', 'seller'::post);
    INSERT INTO employees (id_employee, first_name, last_name, middle_name, passport_number, passport_series, post)
    VALUES (6, 'Alexey', 'Alexeev', NULL, '555555', '5555', 'tester'::post);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227164042_PresetData') THEN
    INSERT INTO suppliers (id_supplier, correspondent_account, legal_address, postal_address, settlement_account, tin)
    VALUES (1, '30101810600000000957', 'г. Москва, ул. Ленина, 19', 'г. Ленинград, ул. Дзерджинского, 17б', '40817810099910004312', '123456789000');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227164042_PresetData') THEN
    UPDATE users SET email = 'db@mail.ru'
    WHERE id_employee = 1;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227164042_PresetData') THEN
    INSERT INTO users (id_employee, deleted, email, password)
    VALUES (2, FALSE, 'chief@mail.ru', '1ED6D5667B292B55FE629FCACB0027C808D6686C8C24B045E15212FC0207C73EBBC97F796695FCD306E2E4D3E8CCBF64C031221403023CEBFE86738119C97C20');
    INSERT INTO users (id_employee, deleted, email, password)
    VALUES (3, FALSE, 'spec@mail.ru', '1ED6D5667B292B55FE629FCACB0027C808D6686C8C24B045E15212FC0207C73EBBC97F796695FCD306E2E4D3E8CCBF64C031221403023CEBFE86738119C97C20');
    INSERT INTO users (id_employee, deleted, email, password)
    VALUES (4, FALSE, 'store@mail.ru', '1ED6D5667B292B55FE629FCACB0027C808D6686C8C24B045E15212FC0207C73EBBC97F796695FCD306E2E4D3E8CCBF64C031221403023CEBFE86738119C97C20');
    INSERT INTO users (id_employee, deleted, email, password)
    VALUES (5, FALSE, 'sell@mail.ru', '1ED6D5667B292B55FE629FCACB0027C808D6686C8C24B045E15212FC0207C73EBBC97F796695FCD306E2E4D3E8CCBF64C031221403023CEBFE86738119C97C20');
    INSERT INTO users (id_employee, deleted, email, password)
    VALUES (6, FALSE, 'test@mail.ru', '1ED6D5667B292B55FE629FCACB0027C808D6686C8C24B045E15212FC0207C73EBBC97F796695FCD306E2E4D3E8CCBF64C031221403023CEBFE86738119C97C20');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227164042_PresetData') THEN
    PERFORM setval(
        pg_get_serial_sequence('car_models', 'id_car_model'),
        GREATEST(
            (SELECT MAX(id_car_model) FROM car_models) + 1,
            nextval(pg_get_serial_sequence('car_models', 'id_car_model'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('employees', 'id_employee'),
        GREATEST(
            (SELECT MAX(id_employee) FROM employees) + 1,
            nextval(pg_get_serial_sequence('employees', 'id_employee'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('suppliers', 'id_supplier'),
        GREATEST(
            (SELECT MAX(id_supplier) FROM suppliers) + 1,
            nextval(pg_get_serial_sequence('suppliers', 'id_supplier'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227164042_PresetData') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230227164042_PresetData', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227182300_DetailSeriesPresetData') THEN
    INSERT INTO detail_series (id_detail_series, code, description)
    VALUES (1, 'SDH-242-790.1', 'Full completed and assembled automobile');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227182300_DetailSeriesPresetData') THEN
    PERFORM setval(
        pg_get_serial_sequence('detail_series', 'id_detail_series'),
        GREATEST(
            (SELECT MAX(id_detail_series) FROM detail_series) + 1,
            nextval(pg_get_serial_sequence('detail_series', 'id_detail_series'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230227182300_DetailSeriesPresetData') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230227182300_DetailSeriesPresetData', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230228131104_RemoveWorkEntities') THEN
    DROP TABLE works;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230228131104_RemoveWorkEntities') THEN
    DROP TABLE work_plans;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230228131104_RemoveWorkEntities') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230228131104_RemoveWorkEntities', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230228131752_ChangeEnumAutoStatus') THEN
    alter table autos alter status type text;
    drop type auto_status cascade;
    create type auto_status as enum ('assembled', 'testing', 'selling', 'sold');
    alter type auto_status owner to postgres;
    alter table autos alter status type auto_status
    using status::auto_status;
    alter table autos alter status set default 'assembled'::auto_status;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230228131752_ChangeEnumAutoStatus') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230228131752_ChangeEnumAutoStatus', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230302084800_FixAutoStatusDefaultValue') THEN
    ALTER TABLE autos ALTER COLUMN status SET DEFAULT ('assembled');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230302084800_FixAutoStatusDefaultValue') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230302084800_FixAutoStatusDefaultValue', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303080152_LittleRework') THEN
    ALTER TABLE contracts DROP CONSTRAINT fk_contracts_purchase_requests;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303080152_LittleRework') THEN
    ALTER TABLE details DROP CONSTRAINT pk_details;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303080152_LittleRework') THEN
    ALTER TABLE contracts RENAME COLUMN id_purchase_request TO "PurchaseRequestId";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303080152_LittleRework') THEN
    ALTER INDEX "IX_contracts_id_purchase_request" RENAME TO "IX_contracts_PurchaseRequestId";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303080152_LittleRework') THEN
    ALTER TABLE details ADD CONSTRAINT pk_details PRIMARY KEY (id_detail);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303080152_LittleRework') THEN
    CREATE INDEX "IX_details_id_detail_series" ON details (id_detail_series);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303080152_LittleRework') THEN
    ALTER TABLE contracts ADD CONSTRAINT "FK_contracts_purchase_requests_PurchaseRequestId" FOREIGN KEY ("PurchaseRequestId") REFERENCES purchase_requests (id_purchase_requests);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303080152_LittleRework') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230303080152_LittleRework', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    ALTER TABLE contracts DROP CONSTRAINT "FK_contracts_purchase_requests_PurchaseRequestId";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    DROP TABLE purchase_request_details;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    DROP TABLE purchase_requests;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    DROP INDEX "IX_contracts_PurchaseRequestId";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    ALTER TABLE contracts DROP COLUMN "PurchaseRequestId";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    ALTER TABLE contracts RENAME COLUMN id_employee TO id_storekeeper;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    ALTER INDEX "IX_contracts_id_employee" RENAME TO "IX_contracts_id_storekeeper";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    DROP TYPE request_status;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303094840_RemovePurchaseRequest') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230303094840_RemovePurchaseRequest', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303115325_AutoNotNullColumns') THEN
    UPDATE autos SET cost = 0.0 WHERE cost IS NULL;
    ALTER TABLE autos ALTER COLUMN cost SET NOT NULL;
    ALTER TABLE autos ALTER COLUMN cost SET DEFAULT 0.0;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303115325_AutoNotNullColumns') THEN
    UPDATE autos SET assembly_date = now() WHERE assembly_date IS NULL;
    ALTER TABLE autos ALTER COLUMN assembly_date SET NOT NULL;
    ALTER TABLE autos ALTER COLUMN assembly_date SET DEFAULT (now());
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303115325_AutoNotNullColumns') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230303115325_AutoNotNullColumns', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303130839_ClientTestRefactor') THEN
    ALTER TABLE tests DROP CONSTRAINT fk_tests_employees;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303130839_ClientTestRefactor') THEN
    ALTER TABLE tests RENAME COLUMN id_employee TO "EmployeeId";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303130839_ClientTestRefactor') THEN
    ALTER INDEX "IX_tests_id_employee" RENAME TO "IX_tests_EmployeeId";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303130839_ClientTestRefactor') THEN
    ALTER TABLE test_autos ALTER COLUMN certification_date DROP NOT NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303130839_ClientTestRefactor') THEN
    ALTER TABLE tests ADD CONSTRAINT "FK_tests_employees_EmployeeId" FOREIGN KEY ("EmployeeId") REFERENCES employees (id_employee);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303130839_ClientTestRefactor') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230303130839_ClientTestRefactor', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303140000_UpdateTriggersAndRemoveAssemblyAutoFunction') THEN
    drop function assembly_auto(auto integer);

    create or replace function tr_log_contracts_ins() returns trigger
        language plpgsql
    as
    $$
    declare
        value text;
    begin
        value = 'INSERT IN contracts (id = ' || new.id_contract || '): ' ||
                'supplier = ' || new.id_supplier || '; total sum of details = ' || new.total_sum ||
                '; supply date = ' || new.supply_date || '; employee = ' || new.id_storekeeper;
        perform log(value);
        return new;
    end;
    $$;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230303140000_UpdateTriggersAndRemoveAssemblyAutoFunction') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230303140000_UpdateTriggersAndRemoveAssemblyAutoFunction', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304092944_TestNullableEndDate') THEN
    ALTER TABLE tests ALTER COLUMN end_date DROP NOT NULL;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304092944_TestNullableEndDate') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230304092944_TestNullableEndDate', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304134408_SaleRefactor') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230304134408_SaleRefactor', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304134807_SaleRenameProperty') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230304134807_SaleRenameProperty', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304140544_SaleRemoveDateTimeFromPrimaryKey') THEN
    create or replace function sell_auto(auto integer, client integer, employee integer) returns void
        language plpgsql
    as
    $$
    declare
        auto_cost     decimal;
        real_status   auto_status;
        trim_id       int;
        active_margin record;
    begin

        select cost, status, id_trim
        into auto_cost, real_status, trim_id
        from autos
        where id_auto = auto;

        if real_status != 'selling' then
            raise exception 'It is available to sale only "selling" autos! Current status is: %', real_status;
        end if;


        select *
        from margins
        where start_date <= current_date
          and id_trim = trim_id
        order by start_date desc
        limit 1
        into active_margin;

        if active_margin is null then
            raise exception 'Is is not possible to sell auto without margin';
        end if;

        auto_cost = auto_cost * (1 + active_margin.margin / 100.0);

        update autos
        set status = 'sold'
        where id_auto = auto;

        insert into sales(id_auto, id_client, id_employee, total_sum)
        values (auto, client, employee, auto_cost);
    end;
    $$;

    create or replace function return_auto(auto integer) returns void
        language plpgsql
    as
    $$
    begin
        update autos
        set status = 'selling'
        where id_auto = auto;

        delete
        from sales
        where id_auto = auto;
    end;
    $$;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304140544_SaleRemoveDateTimeFromPrimaryKey') THEN
    ALTER TABLE sales DROP CONSTRAINT pk_sales;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304140544_SaleRemoveDateTimeFromPrimaryKey') THEN
    ALTER TABLE sales ADD CONSTRAINT pk_sales PRIMARY KEY (id_auto);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304140544_SaleRemoveDateTimeFromPrimaryKey') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230304140544_SaleRemoveDateTimeFromPrimaryKey', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304151148_MarginPrimaryKeyReworked') THEN
    ALTER TABLE margins DROP CONSTRAINT pk_margins;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304151148_MarginPrimaryKeyReworked') THEN
    ALTER TABLE margins RENAME COLUMN id_trim TO id_car_model;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304151148_MarginPrimaryKeyReworked') THEN
    ALTER TABLE margins ADD id_margin integer GENERATED BY DEFAULT AS IDENTITY;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304151148_MarginPrimaryKeyReworked') THEN
    ALTER TABLE margins ADD CONSTRAINT pk_margins PRIMARY KEY (id_margin);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304151148_MarginPrimaryKeyReworked') THEN
    CREATE INDEX "IX_margins_id_car_model" ON margins (id_car_model);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304151148_MarginPrimaryKeyReworked') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230304151148_MarginPrimaryKeyReworked', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    select ;
    drop function log(type log_type, value text);
    drop function return_auto(auto integer, sale_time timestamp);
    drop function sell_auto(auto integer, client integer, seller integer);
    drop function set_margin(trim_id integer, begins_act_from date, margin_value numeric);

    create or replace function sell_auto(auto integer, client integer, seller integer) returns void
        language plpgsql
    as
    $$
    declare
        auto_cost     decimal;
        real_status   auto_status;
        car_model_id       int;
        active_margin record;
        employee_post post;
    begin

        select cost, status, id_car_model
        into auto_cost, real_status, car_model_id
        from autos
        where id_auto = auto;

        if real_status != 'selling' then
            raise exception 'It is available to sale only "selling" autos! Current status is: %', real_status;
        end if;

        select post
        into employee_post
        from employees
        where id_employee = seller;

        if employee_post != 'seller' then
            raise exception 'It is allowed to sale only for employees with post "seller"! Current post is: %', employee_post;
        end if;

        select *
        from margins
        where start_date <= current_date
          and id_car_model = car_model_id
        order by start_date desc
        limit 1
        into active_margin;

        if active_margin is null then
             raise exception 'Margin for specified auto (ID: %. Does it exist?) and current date (%) is missing', auto, current_date;
       end if;

        auto_cost = auto_cost * (1 + active_margin.value / 100.0);

        update autos
        set status = 'sold'
        where id_auto = auto;

        insert into sales(id_auto, id_client, id_employee, total_sum)
        values (auto, client, seller, auto_cost);
    end;
    $$;

    create or replace function set_margin(car_model_id integer, begins_act_from date, margin_value numeric) returns void
        language plpgsql
    as
    $$
    declare
        margin_row record;
    begin
        select *
        from margins
        where id_car_model = car_model_id
          and start_date >= begins_act_from
        order by start_date desc
        limit 1
        into margin_row;

        if margin_row is not null then
            raise exception 'There is already margin for such car model with earlier date (%)!', margin_row.start_date;
        end if;

        insert into margins (id_car_model, start_date, value)
        values (car_model_id, begins_act_from, margin_value);
    end;
    $$;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    ALTER TABLE margins RENAME COLUMN margin TO value;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    ALTER TABLE autos RENAME COLUMN id_trim TO id_car_model;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    ALTER INDEX "IX_autos_id_trim" RENAME TO "IX_autos_id_car_model";
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    INSERT INTO clients (id_client, birthdate, birthplace, first_name, last_name, middle_name, department_code, passport_issuer, passport_number, passport_series)
    VALUES (1, DATE '1999-01-01', 'г. Москва, Московская обл., г.о. Подольск', 'Olga', 'Chernaya', NULL, '123-123', 'МП МРО по России Московской области г.о. Подольск', '1321', '852852');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    UPDATE detail_series SET code = 'HAVAL Horizon 250', description = 'Fully completed and assembled automobile'
    WHERE id_detail_series = 1;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    INSERT INTO detail_series (id_detail_series, code, description)
    VALUES (2, 'CHR-81l', 'Round car headlight (light)');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    PERFORM setval(
        pg_get_serial_sequence('clients', 'id_client'),
        GREATEST(
            (SELECT MAX(id_client) FROM clients) + 1,
            nextval(pg_get_serial_sequence('clients', 'id_client'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('detail_series', 'id_detail_series'),
        GREATEST(
            (SELECT MAX(id_detail_series) FROM detail_series) + 1,
            nextval(pg_get_serial_sequence('detail_series', 'id_detail_series'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304165638_FixFunctionsColNamesPresetData') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230304165638_FixFunctionsColNamesPresetData', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304170152_LogOptimization') THEN
    ALTER TABLE logs DROP CONSTRAINT logs_pkey;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304170152_LogOptimization') THEN
    ALTER TABLE logs DROP COLUMN id;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304170152_LogOptimization') THEN
    ALTER TABLE logs DROP COLUMN log_type;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304170152_LogOptimization') THEN
    ALTER TABLE logs ADD CONSTRAINT logs_pkey PRIMARY KEY (log_time);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304170152_LogOptimization') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230304170152_LogOptimization', '7.0.3');
    END IF;
END $EF$;
COMMIT;

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304185439_UseDateTimeUtc') THEN
    ALTER TABLE sales ALTER COLUMN execution_date TYPE timestamp with time zone;
    ALTER TABLE sales ALTER COLUMN execution_date SET DEFAULT (now() at time zone 'utc');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304185439_UseDateTimeUtc') THEN
    ALTER TABLE logs ALTER COLUMN log_time TYPE timestamp with time zone;
    ALTER TABLE logs ALTER COLUMN log_time SET DEFAULT (now() at time zone 'utc');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304185439_UseDateTimeUtc') THEN
    ALTER TABLE contracts ALTER COLUMN conclusion_date TYPE timestamp with time zone;
    ALTER TABLE contracts ALTER COLUMN conclusion_date SET DEFAULT (now() at time zone 'utc');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304185439_UseDateTimeUtc') THEN
    ALTER TABLE autos ALTER COLUMN assembly_date TYPE timestamp with time zone;
    ALTER TABLE autos ALTER COLUMN assembly_date SET DEFAULT (now() at time zone 'utc');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20230304185439_UseDateTimeUtc') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20230304185439_UseDateTimeUtc', '7.0.3');
    END IF;
END $EF$;
COMMIT;

